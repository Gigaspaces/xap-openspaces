<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/remoting/openspaces-remoting.xsd">

    <!--
        Spring property configurer which allows us to use system properties (such as user.name).
    -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <props>
                <prop key="dataGridName">dataGrid</prop>
                <prop key="security.encrypted">false</prop>
                <prop key="scripting.asyncConcurrentConsumers">5</prop>
            </props>
        </property>
    </bean>

    <!--
        A bean representing a space (an IJSpace implementation).

        No need to register for space mode notifications since no other beans are exists within this
        context. Allows to use secured Space without setting username and password.
    -->
    <os-core:space id="space" url="/./${dataGridName}">
        <os-core:filter-provider ref="serviceExporter"/>
        <os-core:security username="${security.username}" password="${security.password}" encrypted="${security.encrypted}" />
    </os-core:space>

    <!-- A GigaSpace instance (that can be used within scripts) that works only against this cluster member -->
    <os-core:giga-space id="gigaSpace" space="space" clustered="false" />

    <!-- A GigaSpace instance (that can be used within scripts) that works only against the whole cluster -->
    <os-core:giga-space id="clusteredGigaSpace" space="space" clustered="true" />

    <!-- The scripting executor remoting support -->
    <bean id="scriptingExecutorImpl" class="org.openspaces.remoting.scripting.DefaultScriptingExecutor" />

    <os-remoting:service-exporter id="serviceExporter" template-lookup-name="org.openspaces.remoting.scripting.ScriptingExecutor">
        <os-remoting:service ref="scriptingExecutorImpl"/>
    </os-remoting:service-exporter>

    <os-events:polling-container id="remotingContainer" giga-space="gigaSpace" concurrent-consumers="${scripting.asyncConcurrentConsumers}">
        <os-events:listener ref="serviceExporter"/>
    </os-events:polling-container>

</beans>