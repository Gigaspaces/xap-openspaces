# ====================================================================================================================
# GigaSpaces configuration overwriting file, used for overwrite
# the space and container schema properties as well as other system properties.
# If client has requested to load a properties file (or passed a Properties java object), we attempt to load the properties file
# from <GS dir>/config (if <GS dir> is in the classpath) or from an http url.
# if it is found, we load it to the system, set these attributes to the SpaceURL
# properties data structure.
# Any system property set overwrites any other settings, then the Properties file (or user defined 
# custom Properties object which might be passed) is parsed, its properties are injected to the system 
# and later used to override the space/container/cluster configurations, as well as other VM system properties.
# 
# The following types of properties are supported as part of the properties object/file:
# ======================================================================================
# 1. space/container configuration - the prop key is the XPath of the element as it set in the space/container schema xml file.
# e.g. For space config: space-config.lrmi-stub-handler.protocol-name=rmi
# e.g. For container config: com.j_spaces.core.container.directory_services.jini_lus.enabled=false
# 
# 2. cluster configuration - the prop key is the system property set into the ${elementname} in the cluster schema xml file.
# 3. System properties - the key must start with -D, and indicates the system to set that key/value as a system property.
# 4. SpaceURL attributes - the key must start with gs.space.url.arg.<atribute name> e.g. gs.space.url.arg.total_members=111
# or gs.space.url.arg_line=schema=persistent&cluster_schema=async_replicated&total_members=3&id=2&nowritelease=true&fifo=true&create
# - The space url args should be all in lower case.
# - Usage of the ${xxx} setting via a system property is valid in any scenario, but that will be overwritten if option number 1 is used.
# 
#
#
#===================================================
# Space and container XPath PROPERTIES:
#===================================================
## Cluster config related settings:
# To enable the cluster 
#space-config.cluster.enabled=true
#The static members cluster xml file needs to be located in <root dir>/config folder, e.g. 
#c:/myFloder/config/multi-site and the c:/myFloder needs to be added
#space-config.cluster.config-url=/config/multi-site
#### Examples for other optional cluster config urls:
#space-config.cluster.config-url=/config/myTest-cluster-config.xml /config/myTest2-cluster.xml 
#space-config.cluster.config-url=D:\\myFolder\\config\\default-cluster.xml
#space-config.cluster.config-url=/config/default
#space-config.cluster.config-url=/config/myAsyncRepl-cluster.xml
# To disable GigaSpaces shutdown hook
#com.j_spaces.core.container.shutdown_hook=false
#
# To disable embedded Webster HTTPD.
#com.j_spaces.core.container.embedded-services.httpd.enabled=false
# The host port the server socket HTTPD (Webster) is using is bound to.  
# Default value: port 9813 but if that is busy it generates an anonymous port. 
# Using the following you may overwrite the port number: 
# com.j_spaces.core.container.embedded-services.httpd.explicit-binding-port=9813
##### Jini Lookup service container config related:
#com.j_spaces.core.container.directory_services.jini_lus.start-embedded-lus=false
#com.j_spaces.core.container.directory_services.jini_lus.enabled=false
#com.j_spaces.core.container.directory_services.jini_lus.unicast_discovery.enabled=true
#com.j_spaces.core.container.directory_services.jini_lus.unicast_discovery.lus_host=host:port
# If true, will start an embedded Mahalo Jini Transaction Manager. Default value: false
#com.j_spaces.core.container.embedded-services.mahalo.start-embedded-mahalo=true
#to overwrite the space config implicit-indexes just add the line:
#space-config.number-implicit-indexes=-1
#to overwrite the space config lrmi protocol
#space-config.lrmi-stub-handler.protocol-name=rmi
#to overwrite the space config serialization-type just add the line:
#space-config.serialization-type=0

# Enable the space SecurityFilter by setting:
#space-config.filters.DefaultSecurityFilter.enabled=true

# turn on the jms services - if true we enable Gigaspaces jms support by registering the jms administrated objects
# in the directory service. Default value: false
#com.j_spaces.core.container.directory_services.jms_services.enabled = true


#===================================================
# SYSTEM PROPERTIES:
#===================================================
# RECOMMENDED: Common RMI related system properties settings
#
#When it is necessary to ensure that DGC clean calls for unreachable remote references 
#are delivered in a timely fashion, the value of this property represents the maximum interval 
#(in milliseconds) that the Java RMI runtime will allow between garbage collections of the local heap. 
#The default value is 60000 milliseconds (60 seconds).
-Dsun.rmi.dgc.client.gcInterval=600000
-Dsun.rmi.dgc.server.gcInterval=600000
#-Djava.rmi.server.RMIClassLoaderSpi=default
#if this value is true, incoming calls and exceptions thrown from incoming calls will be logged to System.err. 
#Setting this property to true will greatly assist you in debugging your RMI programs.
#-Djava.rmi.server.logCalls=true
#If this value is true, details of rmid's logging activity are sent to System.err.
#-Dsun.rmi.log.debug=true
#-Dcom.gs.onewaywrite=true
## Common debugging logging options:
#set the cluster member url's prefix
#-Dcom.gs.cluster.url-protocol-prefix=rmi://localhost:10098
#to set the license key
#-Dcom.gs.licensekey=
#-Dcom.gs.home=

# Runtime configuration report of the overall system configurations (spaces, container, cluster)
# system env, system properties etc.
#-Dcom.gs.env.report=true

#===================================================
# Space URL attributes:
#===================================================
#gs.space.url.arg.total_members=10
#gs.space.url.arg.id=2
#gs.space.url.arg.schema=persistent
#gs.space.url.arg.nowritelease=true
#Other optional attributes (add each to the gs.space.url.arg. prefix):
#backup_id, clustergroup, clustername, cluster, cluster_schema, groups, fifo
#updatemode, versioned, uselocalcache, timeout, securitymanager, nocache, create, destroy
# Example how to set a list of Space URL attributes:
#gs.space.url.arg_line=schema=persistent&id=2&total_members=10&Create