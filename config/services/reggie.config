/* Configure source file for Jini Lookup Service - Reggie */
import org.jini.rio.boot.BootUtil;

com.sun.jini.reggie {
	    // Set the groups for reggie to advertise
	    initialMemberGroups = BootUtil.toArray("${com.gs.jini_lus.groups}");
	    initialLookupGroups = BootUtil.toArray("${com.gs.jini_lus.groups}");
	    
	    //Make sure the command line contains a proper setting for -Dcom.gs.jini_lus.locators
		//the following line is commented since not in all cases the system property was passed
		//NOTE: in order to enable the Jini Locators unicast discovery and registration, please
		//uncomment the next line and pass -Dcom.gs.jini_lus.locators=<host:port> in the command line
		//initialLookupLocators = BootUtil.toLookupLocators("${com.gs.jini_lus.locators}");
		
	    unicastDiscoveryHost = BootUtil.getHostAddress();
	    
	    // uncomment the following the next line to use Jrmp exporter 
        // serverExporter = new net.jini.jrmp.JrmpExporter();

	   //  uncomment the next lines to use GenericExporter with NIO protocol Adaptor and SmartStubs support
       //  nioConfig = new com.gigaspaces.transport.nio.NIOConfiguration(
       //									1, /* min executors threads */
       //									64, /* max executors threads */
       //									20, /* maxConnPool */
       //									true, /* isMultiplex */ 
       //									null, /* bindHostName - if null resolves to the localhost IP address */
       //									0, /* bindPort - if null any next free port */						
	   //									Integer.MAX_VALUE, /* threadsQueueSize */
       //									0, /* slowConsumerThroughput */
       //									1000, /* slowConsumerLatency */
       //									3 /* slowConsumerRetries */ );
       //  serverExporter = new com.gigaspaces.transport.GenericExporter( nioConfig );			    
}

net.jini.discovery.LookupDiscovery {

	    /*
		 * Setup for Multi Network-Interface cards
		 * --------------------------------------------------------------- 
		 * Each network interface that is represented by an element in the 
		 * array corresponding to this configuration item will be used to send 
		 * and receive multicast packets when this utility is participating in the
		 * multicast discovery process. When not set, this utility will use all
		 * of the network interfaces in the system. When this entry is set to a
		 * zero length array, multicast discovery is effectively disabled. And
		 * when set to null, the interface to which the operating system
		 * defaults will be used.
		 *
		 * Hence, to use a specific network card, call getByName which searches
		 * for the network interface with the specified name.
		 */

	    //multicastInterfaces = null;
	    //multicastInterfaces = new java.net.NetworkInterface[]{};
	    //multicastInterfaces = new java.net.NetworkInterface[] { java.net.NetworkInterface.getByName("${java.rmi.server.hostname}") };
}
