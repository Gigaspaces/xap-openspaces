<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
      xmlns:os-events="http://www.openspaces.org/schema/events"
      xmlns:os-core="http://www.openspaces.org/schema/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:os-eventcontainer="http://www.openspaces.org/schema/mule/os-eventcontainer"
      xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.2"

      xsi:schemaLocation="http://www.openspaces.org/schema/core http://www.openspaces.org/schema/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/events/openspaces-events.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
       http://www.mulesource.org/schema/mule/stdio/2.2 http://www.mulesource.org/schema/mule/stdio/2.2/mule-stdio.xsd
       http://www.openspaces.org/schema/mule/os-eventcontainer http://www.openspaces.org/schema/mule/mule-os-eventcontainer.xsd">

    <description>Tests mule connector, receive and process single object at a time.</description>

    <spring:beans>
        <!--
            A bean representing a space (an IJSpace implementation).
        -->
        <os-core:space id="space" url="/./space" lookup-groups="${user.name}"/>

        <os-core:local-tx-manager id="transactionManager" space="space"/>

        <os-core:giga-space id="gigaSpace" space="space" tx-manager="transactionManager"/>


        <spring:bean id="transactionFactory"
                     class="org.mule.module.spring.transaction.SpringTransactionFactory">
            <spring:property name="manager">
                <spring:ref bean="transactionManager"/>
            </spring:property>
        </spring:bean>
        
        <!--
            A polling event container that perfoms (by default) polling take operations against
            the space using the provided template (in our case, and the non processed data objects).
            Once a match is found, the data processor bean event listener is triggered using the
            annotation adapter.
        -->
        <os-events:polling-container id="helloPollingEventContainer" giga-space="gigaSpace">
            <os-events:tx-support tx-manager="transactionManager" />
            <os-core:template>
                <spring:bean class="org.openspaces.itest.esb.mule.SimpleMessage">
                    <spring:property name="read" value="false"/>
                </spring:bean>
            </os-core:template>
        </os-events:polling-container>
    </spring:beans>

    <!-- this connector must be declared ,in order to inject the  Spring appliction context -->
    <os-eventcontainer:connector name="gigaSpacesConnector"/>

    <!--The Mule model initialises and manages your UMO components-->

    <model name="helloSample">

        <service name="MessageReaderUMO">
            <inbound>
                <os-eventcontainer:inbound-endpoint
                        address="os-eventcontainer://helloPollingEventContainer">
                    <custom-transaction factory-ref="transactionFactory" action="BEGIN_OR_JOIN"/>
                </os-eventcontainer:inbound-endpoint>
            </inbound>

            <component class="org.openspaces.itest.esb.mule.eventcontainer.tx.TxRollBackMessageReader"/>

            <outbound>
                <pass-through-router>
                    <os-eventcontainer:outbound-endpoint giga-space="gigaSpace">
                        <custom-transaction factory-ref="transactionFactory" action="BEGIN_OR_JOIN"/>
                    </os-eventcontainer:outbound-endpoint>
                </pass-through-router>
            </outbound>

        </service>

    </model>

</mule>
