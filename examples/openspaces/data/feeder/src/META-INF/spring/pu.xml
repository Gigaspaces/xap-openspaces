<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/remoting/openspaces-remoting.xsd">

    <!--
        Spring propery configurer which allows us to use system properties (such as user.name).
    -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <!--
        Enables the usage of @GigaSpaceContext annotation based injection.
    -->
    <os-core:giga-space-context/>

    <!--
        A bean representing a space (an IJSpace implementation).

        Note, we perform a lookup on the space since we are working against a remote space.
    -->
    <os-core:space id="space" url="jini://*/*/space" lookup-groups="${user.name}"/>

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace.
    -->
    <os-core:giga-space id="gigaSpace" space="space"/>

    <!--
        The Data feeder bean, writing new Data objects to the space in a constant interval.
    -->
    <bean id="dataFeeder" class="org.openspaces.example.data.feeder.DataFeeder"/>

    <!-- Remoting Example -->

    <!--
        The OpenSpaces Remoting proxy based on the IDataProcessor interface. Uses the space as the
        transport layer.
    -->
    <os-remoting:proxy id="dataProcessor" giga-space="gigaSpace"
                       interface="org.openspaces.example.data.common.IDataProcessor" timeout="15000">
        <os-remoting:routing-handler>
            <bean class="org.openspaces.example.data.feeder.support.DataRemoteRoutingHandler"/>
        </os-remoting:routing-handler>
    </os-remoting:proxy>

    <!--
        The DataRemoting bean, uses the proxied dataProcessor without any knowledge of the remoting
        invocation.
    -->
    <bean id="dataRemoting" class="org.openspaces.example.data.feeder.DataRemoting">
        <property name="dataProcessor" ref="dataProcessor"/>
    </bean>

    <!-- Local View Example ("client side") -->

    <!--
        Define a local view based on a view query. The view query keeps all the Data objects that
        are processed in the local view.

        The Local View is an IJSpace implementation.
    -->
    <os-core:local-view id="processedViewSpace" space="space">
        <os-core:view-query where="processed = true" class="org.openspaces.example.data.common.Data"/>
    </os-core:local-view>

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace. Note, since the Lcoal
        View is an IJSpace, we can use the GigaSpace inteface on top of it.
    -->
    <os-core:giga-space id="processedViewGigaSpace" space="processedViewSpace"/>

    <!--
        A counter counting all the Data instances within a Space. In our case, works against
        the Local View thus counting all the processed data across the cluster (if the processor
        topology is a clustered one, which by default it is).
    -->
    <bean id="viewDataCounter" class="org.openspaces.example.data.feeder.ViewDataCounter"/>

</beans>