<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xmlns:os-events="http://www.openspaces.org/schema/events"
       xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
       xmlns:os-sla="http://www.openspaces.org/schema/sla"
       xmlns:os-jms="http://www.openspaces.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/remoting/openspaces-remoting.xsd
       http://www.openspaces.org/schema/jms http://www.openspaces.org/schema/jms/openspaces-jms.xsd
       http://www.openspaces.org/schema/sla http://www.openspaces.org/schema/sla/openspaces-sla.xsd">


    <!--
        Simply use SLA to add a monitor that uses the viewDataCounter bean to count the globaly
        processed Data objects (using LocalView) and count the number of feeds written.

        Based on the feed count monitor we add a relocation policy that will relocate this feeder
        each time 50 feeds has been written to the space (commented out).
     -->
    <os-sla:sla>
        <!--<os-sla:relocation-policy monitor="Feed Count" high="50" />-->
        <os-sla:monitors>
            <os-sla:bean-property-monitor name="Processed Data" bean-ref="viewDataCounter" property-name="processedDataCount" />
            <os-sla:bean-property-monitor name="Feed Count" bean-ref="dataFeeder" property-name="feedCount" />
            <os-sla:bean-property-monitor name="JMS Feed Count" bean-ref="jmsDataFeeder" property-name="feedCount" />
        </os-sla:monitors>
    </os-sla:sla>
    
    <!--
        Spring propery configurer which allows us to use system properties (such as user.name).
    -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <props>
                <prop key="numberOfTypes">100</prop>
            </props>
        </property>
    </bean>

    <!--
        Scan for components (both Spring ones and OpenSpaces ones)
    -->
    <context:component-scan base-package="org.openspaces.example.data"/>

    <!--
        Enables the usage of @GigaSpaceContext annotation based injection.
    -->
    <os-core:giga-space-context/>

    <!--
        A bean representing a space (an IJSpace implementation).

        Note, we perform a lookup on the space since we are working against a remote space.
    -->
    <os-core:space id="space" url="jini://*/*/space" />

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace.
    -->
    <os-core:giga-space id="gigaSpace" space="space"/>

    <!--
        The Data feeder bean, writing new Data objects to the space in a constant interval.
    -->
    <bean id="dataFeeder" class="org.openspaces.example.data.feeder.DataFeeder" depends-on="gigaSpace">
        <property name="instanceId" value="${clusterInfo.instanceId}" />
        <property name="numberOfTypes" value="${numberOfTypes}" />
    </bean>
    
    <!--
        The JMS Data feeder bean, writing new Data objects to the space in a constant interval, using Spring's JmsTemplate.
        Writing Data objects this way is possible thanks to the MessageConverter injected to the ConnectionFactory used by the JmsTemplate.
        It is important to understand that the MessageConverter is not the standard JmsTemplate's MessageConverter, but the GigaSpaces's
        implementation of MessageConverter.
    -->
    <bean id="jmsDataFeeder" class="org.openspaces.example.data.feeder.JMSDataFeeder" depends-on="gigaSpace">
        <property name="instanceId" value="${clusterInfo.instanceId}" />
        <property name="numberOfTypes" value="${numberOfTypes}" />
        <property name="jmsTemplate">
            <bean class="org.springframework.jms.core.JmsTemplate">
                <property name="connectionFactory" ref="connectionFactory"/>
                <property name="defaultDestination" ref="destination" />
            </bean>
        </property>
    </bean>

    <!--
        The JMS ConnectionFactory used by the JMS feeder
    -->
    <os-jms:connection-factory id="connectionFactory" giga-space="gigaSpace" message-converter="messageConverter" />

    <!--
        The MessageConverter used by the JMS layer to convert JMS message to any POJO/s before sending.
    -->
    <bean id="messageConverter" class="com.j_spaces.jms.utils.ObjectMessage2ObjectConverter" />

    <!--
        A JMS destination used when sending messages
    -->
    <os-jms:queue id="destination" name="MyQueue" />

	<!-- Remoting Example -->

    <os-remoting:annotation-support />
	
    <!--
        The DataRemoting bean, uses the proxied dataProcessor without any knowledge of the remoting
        invocation.
    -->
    <bean id="dataRemoting" class="org.openspaces.example.data.feeder.DataRemoting" depends-on="gigaSpace">
        <property name="numberOfTypes" value="${numberOfTypes}" />
    </bean>

    <!--
        Uses the sync remoting proxoed bean to call count without any knownaled of the remoting
        invocation.
    -->
    <bean id="syncBroadcastDataCounter" class="org.openspaces.example.data.feeder.SyncBroadcastDataCounter" depends-on="gigaSpace">
    </bean>

    <!-- Local View Example ("client side") -->

    <!--
        Define a local view based on a view query. The view query keeps all the Data objects that
        are processed in the local view.

        The Local View is an IJSpace implementation.
    -->
    <os-core:local-view id="processedViewSpace" space="space">
        <os-core:view-query where="processed = true" class="org.openspaces.example.data.common.Data"/>
    </os-core:local-view>

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace. Note, since the Lcoal
        View is an IJSpace, we can use the GigaSpace inteface on top of it.
    -->
    <os-core:giga-space id="processedViewGigaSpace" space="processedViewSpace"/>

    <!--
        A counter counting all the Data instances within a Space. In our case, works against
        the Local View thus counting all the processed data across the cluster (if the processor
        topology is a clustered one, which by default it is).
    -->
    <bean id="viewDataCounter" class="org.openspaces.example.data.feeder.ViewDataCounter"/>

</beans>