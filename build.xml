<?xml version="1.0"?>

<project name="openspaces" default="usage" basedir=".">

    <property file="project.properties"/>
    <property file="build.properties"/>
	<property environment="env"/>

	<condition property="mvn.executable" value="mvn.bat">
            <os family="windows" />
    </condition>

    <condition property="mvn.executable" value="mvn">
            <os family="unix" />
    </condition>
	
    <path id="all-libs">

        <fileset dir="${basedir}/deploy">
            <include name="**/*.jar"/>
        </fileset>
		<!-- OpenJPA jars must come prior to ejb jars in classpath list, otherwise jpa classes 
		will not compile due to interface PersistenceProvider conflict -->
    	<fileset dir="${lib.dir}">
            <include name="**/jpa/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="required/gs-openspaces.jar"/>
            <exclude name="optional/openspaces/**"/>
            <exclude name="platform/openspaces/**"/>
            <exclude name="ant/**"/>
        </fileset>
        <path path="${basedir}/tools/groovy/embeddable/groovy-all-1.8.6.jar" />
    	<path path="${basedir}/../gigaspaces/classes" />
        <path path="${basedir}/../gigaspaces/src/java/resources" />

    </path>
	
    <path id="javadoc-libs">
        <path path="${target.classes.dir}" />
    	<path path="${basedir}/../gigaspaces/classes" />
    </path>

    <path id="tests-libs">

        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="platform/ant/*.jar"/>
            <exclude name="required/gs-openspaces.jar"/>
            <exclude name="optional/openspaces/**"/>
            <exclude name="platform/openspaces/**"/>
            <exclude name="ant/**"/>
        </fileset>
    	<fileset dir="${deploy.templates.dir}">
            <include name="**/*.jar"/>
        </fileset>
    	<path path="${basedir}/tools/groovy/embeddable/groovy-all-1.8.6.jar" />
        <path path="${basedir}/../gigaspaces" />
    	<path path="${basedir}/../gigaspaces/classes" />
        <path path="${basedir}/../gigaspaces/src/java/resources" />

    </path>

    <target name="usage">
        <echo message=""/>
        <echo message="OpenSpaces build script"/>
        <echo message="-----------------------------------------"/>
        <echo message=""/>
        <echo message="Among the available targets are:"/>
        <echo message=""/>
        <echo message="clean    --> Cleans all output dirs"/>
        <echo message="build    --> build all; don't create JARs"/>
        <echo message="tests    --> run tests"/>
        <echo message="dist     --> create a distribution"/>
        <echo message=""/>
    </target>

    <target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc)">
        <!-- Just kill target dir (it's safer). No need at this point to keep it. -->
        <delete dir="${target.dir}"/>
    	<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="clean -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
    </target>

    <!--
    ########### COMPILE TARGETS ###########
    -->
	
    <target name="buildmain" description="Compile main source tree java files into class files">
    	<echo message="productversion=${productversion}"/>  
    	<echo message="maven.repo.local=${maven.repo.local}"/>  
    	<exec executable="${env.M2_HOME}\bin\${mvn.executable}" failonerror="true"> 
			<arg line="package -DskipTests -Dmaven.repo.local=${maven.repo.local}" />
		</exec>
    	<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="install:install-file -DgroupId=com.gigaspaces -DartifactId=gs-openspaces -DcreateChecksum=true -Dversion=${productversion} -Dpackaging=jar -DpomFile=${basedir}/pom.xml -Dfile=${target.dir}/gs-openspaces.jar -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
    	<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="install:install-file -DgroupId=com.gigaspaces -DartifactId=gs-openspaces -DcreateChecksum=true -Dversion=${productversion} -Dpackaging=jar -DpomFile=${basedir}/pom.xml -Dclassifier=tests -Dfile=${target.dir}/gs-openspaces-${productversion}-tests.jar -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
    </target>


    <target name="build_1_5" depends="clean, buildmain" description="Compile main sources"/>


    <target name="srczip" description="Create source ZIP (containing Java sources)">

    	<mkdir dir="${lib.dir}/optional/openspaces"/>
        <delete file="${lib.dir}/optional/openspaces/gs-openspaces-src.zip"/>

        <zip zipfile="${lib.dir}/optional/openspaces/gs-openspaces-src.zip">
            <fileset dir="${main.src.dir}">
                <include name="org/openspaces/**"/>
            </fileset>
        </zip>

    </target>

    <!--
        Generate javadoc for the main and JDK 1.5 sources.
    -->
    <target name="javadoc" description="Generate framework Javadocs">
    	<echo message="${gs.product.version}" />
        <delete dir="${target.javadoc.dir}" failonerror="false"/>
        <mkdir dir="${target.javadoc.dir}"/>

        <javadoc sourcepath="${main.src.dir}" destdir="${target.javadoc.dir}" windowtitle="GigaSpaces XAP ${gs.product.version} API"
                 source="1.6" access="protected" author="true" version="true" use="true"
                 useexternalfile="yes"
                 defaultexcludes="true"
                 header='&lt;a href="index.html" target=\"_top\"&gt;GigaSpaces XAP ${gs.product.version} API&lt;/a&gt;'
        		packagenames="org.openspaces.**.*"
        		excludepackagenames="org.openspaces.admin.internal.**.*, org.openspaces.core.executor.internal.**.*, org.openspaces.core.internal.**.*, org.openspaces.core.transaction.internal.**.*">
            <arg value="-breakiterator"/>
            <arg value="-J-Xmx256m"/>
            <arg value="-J-XX:MaxPermSize=256m"/>
            <doctitle><![CDATA[<h1>GigaSpaces XAP ${gs.product.version} API</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &copy; <a href="http://www.gigaspaces.com/" target="_top">GigaSpaces</a>.</i>]]></bottom>
            <classpath refid="all-libs"/>
        	<fileset dir="${basedir}/../gigaspaces/src/java" defaultexcludes="yes">
	      		<include name="com/**"/>
				<exclude name="com/j_spaces/jms/**" />
				<contains text="JAVA-DOC-STAMP"/>
		    </fileset>
        	<fileset dir="${basedir}/../gigaspaces/src/java" defaultexcludes="yes">
	      		<include name="com/sun/**/*.java"/>
        		<include name="net/**/*.java"/>
		    </fileset>
        	<fileset dir="${basedir}/../openspaces-jetty/src/main/java" defaultexcludes="yes">
		    </fileset>
            <link href="http://download.oracle.com/javase/1,5.0/docs/api/"/>
        	<link href="http://www.gigaspaces.com/docs/JiniApi"/>
            <link href="http://static.springsource.org/spring/docs/3.2.4.RELEASE/javadoc-api/"/>
            <link href="http://aopalliance.sourceforge.net/doc"/>
            <!-- Caucho Burlap/Hessian -->
            <link href="http://jakarta.apache.org/commons/logging/apidocs/"/>
            <link href="http://jakarta.apache.org/commons/pool/apidocs/"/>
        </javadoc>
		<zip zipfile="${target.dir}/xap-javadoc.zip">
    		<zipfileset dir="${target.javadoc.dir}">
                <include name="**/*"/>
            	<exclude name="xap-javadoc.zip" />
            </zipfileset>
    	</zip>
    	
    	<delete dir="${target.javadoc.dir}" includes="**/*" excludes="xap-javadoc.zip" />
    	
    </target>

    <target name="schema" description="Copy over schema files">
        <delete dir="lib/optional/openspaces/schema"/>
    	<mkdir dir="lib/optional/openspaces/schema"/>
        <copy todir="lib/optional/openspaces/schema" flatten="true">
            <fileset dir="${main.resources.dir}">
                <include name="**/*.xsd"/>
            </fileset>
        </copy>
    </target>

    <target name="license" description="Copy over license files">
    	<mkdir dir="lib/optional/openspaces"/>
        <copy todir="lib/optional/openspaces" file="${basedir}/openspaces.license.txt"/>
        <copy todir="lib/optional/openspaces" file="${basedir}/openspaces.notice.txt"/>
    </target>

    <target name="dist_1_5"
            depends="build_1_5, javadoc, install.maven"
            description="Creates the OpenSpaces distribution">
    	<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="assembly:single -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
    </target>
	
	<target name="install.maven" if="productversion">
		<property name="maven.tmp.dir" value="${basedir}/maven.tmp.dir" />
		<delete dir="${maven.tmp.dir}"/>
	 	<java classname="org.openspaces.maven.support.POMGenerator" fork="true">
	 		<arg value="${maven.tmp.dir}"/>
	 		<classpath refid="all-libs"/>
            <classpath location="${target.classes.dir}"/>
	 	</java>	
		<echo message="${productversion}" />
    	<!-- Install newly created jar in local maven repository -->
		<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="install:install-file -DgroupId=com.gigaspaces -DartifactId=gs-openspaces -DcreateChecksum=true -Dversion=${productversion} -Dpackaging=jar -DpomFile=${basedir}/pom.xml -Dfile=${target.dir}/gs-openspaces.jar -Djavadoc=${target.dir}/xap-javadoc.zip -Dsources=${target.dir}/gs-openspaces-sources.jar -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
		<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="install:install-file -DgroupId=com.gigaspaces -DartifactId=gs-openspaces -DcreateChecksum=true -Dversion=${productversion} -Dpackaging=jar -DpomFile=${basedir}/pom.xml -Dfile=${target.dir}/gs-openspaces-${productversion}-tests.jar -Dclassifier=tests -Djavadoc=${target.dir}/xap-javadoc.zip -Dsources=${target.dir}/gs-openspaces-sources.jar -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
		
		<replaceregexp file="${basedir}/tools/alert-integration/pom.xml"
                    match="&lt;gsVersion&gt;(.*)&lt;\/gsVersion&gt;"
                    replace="&lt;gsVersion&gt;${productversion}&lt;\/gsVersion&gt;"/>
		<!--delete dir="${maven.tmp.dir}"/-->
	</target>
	

    <target name="dist">
        <antcall target="dist_1_5"/>
    </target>


    <!--
    ########### TEST TARGETS ###########
    -->

    <!--
         Compile the main test tree.
     -->
    <target name="buildmaintests" depends="build_1_5"
            description="Compile test source tree java files into class files">

        <mkdir dir="${target.testclasses.dir}"/>

        <javac destdir="${target.testclasses.dir}" source="1.6" target="1.6" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${main.test.dir}"/>
            <classpath refid="all-libs"/>
            <classpath location="${target.classes.dir}"/>
        </javac>

        <!-- Pick up config files from test directory -->
        <copy todir="${target.testclasses.dir}" preservelastmodified="true">
            <fileset dir="${main.test.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>

    </target>


    <target name="buildtests" depends="buildmaintests" description="Compile main test sources"/>


    <target name="maintests" depends="buildtests" description="Run main tests">

        <mkdir dir="${target.junit.reports.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="yes" haltonerror="yes">

            <jvmarg line="-Djava.security.policy=policy/policy.all -Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=128m"/>

            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>
        	<classpath location="${deploy.templates.dir}"/>

            <classpath refid="tests-libs"/>

            <formatter type="plain" usefile="false"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

    </target>


    <target name="tests" depends="maintests" description="Run tests"/>


    <!--
         Run test suite and generate test summary.
         Does not halt on failure or error.
     -->
      <target name="testsummary" description="Run tests and generate test summary">

      	<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="test -Dmaven.repo.local=${maven.repo.local}"/>
		</exec>
    </target>
	
	<target name="create.dummy.file.if.tests.failed" if="junit.tests.failed">
		<touch file="${target.junit.reports.dir}/failed" />
	</target>
	
	<target name="create.dummy.file.if.error.in.tests" if="junit.tests.error">
		<touch file="${target.junit.reports.dir}/error" />
	</target>
		
    <target name="clean_tests" depends="clean,tests"/>
</project>