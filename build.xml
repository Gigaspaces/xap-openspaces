<?xml version="1.0"?>

<project name="openspaces" default="usage" basedir=".">

    <property file="project.properties"/>
    <property file="build.properties"/>


    <!--
        Set up properties that indicate whether we're building on JDK 1.5.
        Currently simply checks whether the Java version is not 1.3 or 1.4,
        due to the lack of a greater-than comparator in Ant.
    -->

    <condition property="tiger.available">
        <not>
            <or>
                <equals arg1="${ant.java.version}" arg2="1.3"/>
                <equals arg1="${ant.java.version}" arg2="1.4"/>
            </or>
        </not>
    </condition>

    <path id="all-libs-1.4">

        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="JSpaces.jar"/>
        </fileset>

    </path>

    <path id="all-libs-1.5">

        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="JSpaces-1.4.jar"/>
        </fileset>

    </path>

    <target name="usage">
        <echo message=""/>
        <echo message="OpenSpaces build script"/>
        <echo message="-----------------------------------------"/>
        <echo message=""/>
        <echo message="Among the available targets are:"/>
        <echo message=""/>
        <echo message="clean    --> Cleans all output dirs"/>
        <echo message="build    --> build all; don't create JARs"/>
        <echo message="tests    --> run tests"/>
        <echo message="dist     --> create a distribution"/>
        <echo message=""/>
    </target>

    <target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc)">
        <!-- Just kill target dir (it's safer). No need at this point to keep it. -->
        <delete dir="${target.dir}"/>
        <delete dir="${lib.dir}/${name}" />
    </target>

    <!--
    ########### COMPILE TARGETS ###########
    -->

    <target name="buildmain" description="Compile main source tree java files into class files">

        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.classes.dir}/META-INF"/>

        <javac destdir="${target.classes.dir}" source="1.4" target="1.4" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${main.src.dir}"/>
            <classpath refid="all-libs-1.4"/>
        </javac>

        <copy todir="${target.classes.dir}" preservelastmodified="true">
            <fileset dir="${main.src.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.handlers"/>
                <include name="**/*.schemas"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
                <include name="**/*.xsd"/>
            </fileset>
        </copy>

    </target>

    <!--
         Compile the JDK 1.5 source tree.
     -->
    <target name="buildtiger" depends="buildmain" description="Compile JDK 1.5 source tree java files into class files">

        <javac destdir="${target.classes.dir}" source="1.5" target="1.5" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${tiger.src.dir}"/>
            <classpath refid="all-libs-1.5"/>
        </javac>

        <copy todir="${target.classes.dir}" preservelastmodified="true">
            <fileset dir="${tiger.src.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.handlers"/>
                <include name="**/*.schemas"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
                <include name="**/*.xsd"/>
            </fileset>
        </copy>
    </target>

    <target name="build" depends="buildmain,buildtiger" description="Compile main, and JDK 1.5 sources"/>

    <target name="fulljar" depends="build" description="Create full JAR file with all OpenSpaces classes">

        <mkdir dir="${lib.dir}/${name}"/>
        <delete file="${lib.dir}/${name}/${name}.jar"/>

        <jar jarfile="${lib.dir}/${name}/${name}.jar">
            <fileset dir="${target.classes.dir}">
                <include name="META-INF/**"/>
                <include name="org/openspaces/**"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Title" value="${openspaces-title}"/>
                <attribute name="Implementation-Version" value="${openspaces-version}"/>
                <attribute name="OpenSpaces-Version" value="${openspaces-version}"/>
            </manifest>
        </jar>

    </target>


    <target name="dist" depends="fulljar" description="Creates the OpenSpaces distribution">
        <delete file="${dist.dir}/${name}-${openspaces-version}.zip" />
        <zip zipfile="${dist.dir}/${name}-${openspaces-version}.zip">
            <zipfileset dir="${basedir}">
                <include name="bin/pu*" />

                <include name="examples/**" />
                <exclude name="examples/**/*.iml" />

                <include name="lib/${name}/**" />

            </zipfileset>
        </zip>
    </target>

    <!--
    ########### TEST TARGETS ###########
    -->

    <!--
         Compile the main test tree.
     -->
    <target name="buildmaintests" depends="build"
            description="Compile test source tree java files into class files">

        <mkdir dir="${target.testclasses.dir}"/>

        <javac destdir="${target.testclasses.dir}" source="1.4" target="1.4" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${main.test.dir}"/>
            <classpath refid="all-libs-1.4"/>
            <classpath location="${target.classes.dir}"/>
        </javac>

        <!-- Pick up config files from test directory -->
        <copy todir="${target.testclasses.dir}" preservelastmodified="true">
            <fileset dir="${main.test.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>

    </target>


    <target name="buildtigertests" depends="buildmaintests"
            description="Compile JDK 1.5 test java files into class files">

        <mkdir dir="${target.tigertestclasses.dir}"/>

        <javac destdir="${target.tigertestclasses.dir}" source="1.5" target="1.5" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${tiger.test.dir}"/>
            <classpath refid="all-libs-1.5"/>
            <classpath location="${target.classes.dir}"/>
            <classpath location="${target.testclasses.dir}"/>
        </javac>

        <!-- Pick up config files from test directory -->
        <copy todir="${target.tigertestclasses.dir}" preservelastmodified="true">
            <fileset dir="${tiger.test.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>

    </target>


    <target name="buildtests" depends="buildmaintests,buildtigertests"
            description="Compile main, and JDK 1.5 test sources"/>


    <target name="maintests" depends="buildtests" description="Run main tests">

        <mkdir dir="${target.junit.reports.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="yes" haltonerror="yes">

            <jvmarg line="-Djava.security.policy=policy/policy.all -Djava.awt.headless=true -Xmx128m -XX:MaxPermSize=128m"/>

            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>

            <classpath refid="all-libs-1.4"/>

            <formatter type="plain" usefile="false"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

    </target>


    <target name="tigertests" depends="buildtests" if="tiger.available" description="Run JDK 1.5 tests">

        <mkdir dir="${target.junit.reports.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="yes" haltonerror="yes">

            <jvmarg line="-Djava.security.policy=policy/policy.all -Djava.awt.headless=true -Xmx128m -XX:MaxPermSize=128m"/>

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.tigertestclasses.dir}"/>
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${tiger.test.dir}"/>

            <classpath refid="all-libs-1.5"/>

            <formatter type="plain" usefile="false"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.tigertestclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

    </target>


    <target name="tests" depends="maintests,tigertests" description="Run tests"/>


    <!--
         Run test suite and generate test summary, for both main and tiger tests.
         Does not halt on failure or error, in contrast to the "tests" target above.
     -->
    <target name="testsummary" depends="buildtests" description="Run tests and generate test summary">

        <mkdir dir="${target.junit.reports.dir}"/>
        <mkdir dir="${target.junit.summary.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="no" haltonerror="no">

            <jvmarg line="-Djava.awt.headless=true"/>

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.tigertestclasses.dir}"/>
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>

            <classpath refid="all-libs-1.5"/>

            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
                <fileset dir="${target.tigertestclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

        <junitreport todir="${target.junit.reports.dir}">
            <fileset dir="${target.junit.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${target.junit.summary.dir}"/>
        </junitreport>

    </target>

    <target name="clean_tests" depends="clean,tests"/>
</project>